==> Cloning from https://github.com/maine300/12thplant-app
==> Checking out commit 680ee5dc4460fcf4d9502c499b184bd16f5e50c1 in branch main
==> Using Node.js version 22.16.0 (default)
==> Docs on specifying a Node.js version: https://render.com/docs/node-version
==> Using Bun version 1.1.0 (default)
==> Docs on specifying a Bun version: https://render.com/docs/bun-version
==> Running build command 'npm ci --include=dev && npm run build'...
added 521 packages, and audited 522 packages in 8s
65 packages are looking for funding
  run `npm fund` for details
12 vulnerabilities (3 low, 8 moderate, 1 high)
To address issues that do not require attention, run:
  npm audit fix
To address all issues possible (including breaking changes), run:
  npm audit fix --force
Some issues need review, and may require choosing
a different dependency.
Run `npm audit` for details.
> rest-express@1.0.0 build
> vite build && esbuild server/index.ts --platform=node --packages=external --bundle --format=esm --outdir=dist/server
vite v5.4.19 building for production...
transforming...
Browserslist: browsers data (caniuse-lite) is 9 months old. Please run:
  npx update-browserslist-db@latest
  Why you should do it regularly: https://github.com/browserslist/update-db#readme
âœ“ 1859 modules transformed.
rendering chunks...
computing gzip size...
../dist/public/index.html                   0.63 kB â”‚ gzip:   0.38 kB
../dist/public/assets/index-2U8zt9uS.css   64.21 kB â”‚ gzip:  11.26 kB
../dist/public/assets/index-DJ1PtME-.js   575.78 kB â”‚ gzip: 172.27 kB
(!) Some chunks are larger than 500 kB after minification. Consider:
- Using dynamic import() to code-split the application
- Use build.rollupOptions.output.manualChunks to improve chunking: https://rollupjs.org/configuration-options/#output-manualchunks
- Adjust chunk size limit for this warning via build.chunkSizeWarningLimit.
âœ“ built in 3.71s
  dist/server/index.js  41.6kb
âš¡ Done in 5ms
==> Uploading build...
==> Uploaded in 6.0s. Compression took 2.8s
==> Build successful ðŸŽ‰
==> Deploying...
==> Running 'npm run start'
> rest-express@1.0.0 start
> NODE_ENV=production node dist/server/index.js
==> Exited with status 1
==> Common ways to troubleshoot your deploy: https://render.com/docs/troubleshooting-deploys
==> Running 'npm run start'
> rest-express@1.0.0 start
> NODE_ENV=production node dist/server/index.js
/opt/render/project/src/node_modules/pg-pool/index.js:45
    Error.captureStackTrace(err)
          ^
error: relation "device_states" does not exist
    at /opt/render/project/src/node_modules/pg-pool/index.js:45:11
    at process.processTicksAndRejections (node:internal/process/task_queues:105:5)
    at async file:///opt/render/project/src/node_modules/drizzle-orm/node-postgres/session.js:83:22
    at async DatabaseStorage.initializeDeviceStates (file:///opt/render/project/src/dist/server/index.js:173:29)
    at async file:///opt/render/project/src/dist/server/index.js:1120:3 {
  length: 113,
  severity: 'ERROR',
  code: '42P01',
  detail: undefined,
  hint: undefined,
  position: '177',
  internalPosition: undefined,
  internalQuery: undefined,
  where: undefined,
  schema: undefined,
  table: undefined,
  column: undefined,
  dataType: undefined,
  constraint: undefined,
  file: 'parse_relation.c',
  line: '1449',
  routine: 'parserOpenTable'
}
Node.js v22.16.0